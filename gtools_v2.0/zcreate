#!/bin/bash

usage() { # Help
        cat << EOF
Usage:	./zcreate
		[-b] Build Flag. Include to build the array
		[-c] Custom Flag. Include for manual VDEV configuration
			- DOESNT DO ANYTHING YET
		[-d] Specify how many drives to use. default is every drive attache to HBA controller
		[-f] Force zpool creation
		[-l] Specify RAID level
			- raidz1/2/3, mirror, stripe
		[-n] Specify zpool name. Defaults to "zpool"
		[-v] Specify number of VDEVs to use
		[-h] Displays this message

EOF
        exit 0
}
pause(){ # Waits for user input to continue
read -p "Press Enter to continue" con
case $con in
*)
	;;
esac
}
getbays() { # Fills array BAYS with physical slot number, whether there is a drive present or not
	i=0
	j=3
	BAYS=$((cat /etc/zfs/vdev_id.conf| awk "NR>2" | wc -l) 2>/dev/null)
	while [ $i -lt $BAYS ];do
		bay=$(cat /etc/zfs/vdev_id.conf | awk -v j=$j 'NR==j{print $2}')
		BAY[$i]=$bay
		let i=i+1
		let j=j+1
	done
}
getdrives() { # For each DRIVE in BAY, check if it is a block device. If true add to DRIVES array
	i=0
	for DRIVE in ${BAY[*]};do
		if [ -b /dev/disk/by-vdev/$DRIVE ];then
			DRIVES[$i]=$DRIVE
		fi
		let i=i+1
	done
}
setvdevcount() { # Starting at default VDEV_COUNT for chassis size, if DRIVE_COUNT is indivisible by VDEV_COUNT, increment VDEV_COUNT by one and keep checking until it is.
	case $BAYS in 
	30)
		VDEV_COUNT=3
		;;
	45)
		VDEV_COUNT=5
		;;
	60)
		VDEV_COUNT=5
		;;
	esac
	while :
	do
		if (( $DRIVE_COUNT % $VDEV_COUNT == 0));then
			break
		fi
		let VDEV_COUNT=VDEV_COUNT+1
	done
}
sortdrives(){ # Sorts drives per VDEV and saves each as a newline in z.tmp
	if [ -e $DIR/z.tmp ];then
		rm -f $DIR/z.tmp
	fi
	DRIVESpVDEV=$((DRIVE_COUNT / VDEV_COUNT))
	i=0
	while [ $i -lt $VDEV_COUNT ];do
		j=0
		i_=$(expr $i + 1)
		j_=$((DRIVESpVDEV * i))
		while [ $((j + j_)) -lt $((i_ * DRIVESpVDEV)) ];do
			CARD[$j]=${DRIVES[$((j + j_))]}
			let j=j+1
		done
		echo "${CARD[*]}" >> $DIR/z.tmp
		let i=i+1
	done
}
createpool(){ # Reads z.tmp file and writes zpool creation command and saves in z.conf
	if [ -e $DIR/z.conf ];then
		rm -f $DIR/z.conf
	fi
	printf "zpool create %s " $ZPOOL_NAME >> $DIR/z.conf
	i=1
	while [ $i -lt $((VDEV_COUNT + 1)) ];do
		printf "%s %s " $RAID_LEVEL $(cat z.tmp | awk -v i=$i 'NR==i') >> $DIR/z.conf
		let i=i+1
	done
	echo "$FORCE_POOL" >> $DIR/z.conf
}

CUSTOM_FLAG=no
BUILD_FLAG=no
DIR=$(pwd)
DRIVE_COUNT=0
RAID_LEVEL=
VDEV_COUNT=0
ZPOOL_NAME=
FORCE_POOL=
QUIET=no

while getopts 'bcd:fn:l:qv:h' OPTION; do
	case ${OPTION} in
	b)
		BUILD_FLAG=yes
		;;
	c)
		CUSTOM_FLAG=yes
		;;
	d)
		DRIVE_COUNT=${OPTARG}
		;;
	f)
		FORCE_POOL="-f"
		;;
	l)
		RAID_LEVEL=${OPTARG}
		;;
	n)
		ZPOOL_NAME=${OPTARG}
		;;
	q)
		QUIET=yes
		;;
	v)
		VDEV_COUNT=${OPTARG}
		;;
	h)
		usage
		;;
	esac
done

getbays
getdrives

# If no user input for DRIVE_COUNT then DRIVE_COUNT is eqaul to the number of elements in the DRIVES array
if [ $DRIVE_COUNT -eq 0 ];then
	DRIVE_COUNT=${#DRIVES[@]}
fi
# If no user input for VDEV_COUNT then choose best VDEV_COUNT for amount of drives present
if [ $VDEV_COUNT -eq 0 ];then
	setvdevcount
fi
# If no user input for RAID_LEVEL then default to "RAIDZ2". If user inputs "stripe" then set RAID_LEVEL to empty string
if [ "$RAID_LEVEL" == "stripe" ];then
	RAID_LEVEL=
elif [ -z $RAID_LEVEL ];then
	RAID_LEVEL=raidz2
fi
# If no user input for ZPOOL_NAME then default to "zpool"
if [ -z $ZPOOL_NAME ];then
	ZPOOL_NAME=zpool
fi
# If custom flag is set lanuch manual configuration
if [ "$CUSTOM_FLAG" = "yes" ];then
	echo "Manual configuration is not hooked up yet"
	exit 0
fi

sortdrives
createpool

# If quiet flag is present, complete build with no stdout. If no flag then output the zpool command saved in z.conf
if [ "$QUIET" == "yes" ];then
	:
elif [ "$QUIET" == "no" ];then
	cat $DIR/z.conf 
fi
# If build flag is present; run the zpool create command saved in z.conf
if [ $BUILD_FLAG == yes ];then
	cat $DIR/z.conf | /bin/sh
else
	echo
	echo "Use "-b" flag to build the above zpool"
fi

rm -f $DIR/z.conf
rm -f $DIR/z.tmp

#DEBUG
#cat $DIR/z.tmp
#echo $DRIVE_COUNT
#echo $RAID_LEVEL
#echo $ZPOOL_NAME
#echo $VDEV_COUNT
#echo $DRIVESpVDEV

